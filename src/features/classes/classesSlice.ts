import { createSlice } from '@reduxjs/toolkit';
import { fetchClassesByIds, fetchStudentByName } from '../classesStudents/thunks';
import { studentLogout } from '../students/studentsSlice';
export interface classe {Name?:string,id:string};
export interface ClassesState {
  classes: {[id:string]:classe};
  status: 'idle' | 'loading' | 'failed'|'success';
  error:string|undefined
}

const initialState: ClassesState = {
  classes: {},
  status: 'idle',
  error:undefined
};





export const classeSlice = createSlice({
  name: 'classes',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(fetchClassesByIds.pending,(state)=>{
        state.status = "loading";
    })
    .addCase(fetchClassesByIds.rejected,(state,action)=>{
        state.status = "failed";
        let error = action.error;
        state.error = error.message;
    })
    .addCase(fetchClassesByIds.fulfilled,(state,action)=>{
        //action.payload = [{id,Name}] 
        action.payload.forEach(record=>{
          let {Name,id} = record; 
           state.classes[id] = {Name,id};
        });
        state.status = "success";
    })
    .addCase(fetchStudentByName.fulfilled,(state,action)=>{
      let {Classes} = action.payload;
      Classes.forEach(classID=>{state.classes[classID]={id:classID,Name:undefined}})
    })
    .addCase(studentLogout.type,(state)=>{
      state.error = undefined;
      state.classes = {};
      state.status = 'idle';
    })
   
  },
});


export default classeSlice.reducer;
