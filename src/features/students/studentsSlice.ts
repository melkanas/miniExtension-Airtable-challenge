import { createSlice } from '@reduxjs/toolkit';
import { fetchClassesByIds, fetchStudentByName, fetchStudentsByIds } from '../classesStudents/thunks';

export interface student {Name?:string,id:string};
type status =  'idle' | 'loading' | 'failed'|'success';
type error = string|undefined;
export interface StudentsState {
  students: {[id:string]:student};
  status:{current:status,all:status};
  studentName:string;
  studentID?:string;
  error:{current:error,all:error}
}

const initialState: StudentsState = {
  students: {},
  studentName:"",
  studentID:undefined,
  status:{ current:'idle',all:'idle'},
  error:{current:undefined,all:undefined}
};


export const studentSlice = createSlice({
  name: 'students',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    studentNameChanged(state,action:{payload:string}){
      state.studentName = action.payload
    },
    studentLogout(state){
      state.studentName = '';
      state.studentID = '';
      state.error = {all:undefined,current:undefined};
      state.status.all = 'idle';
      state.status.current = 'idle';
      state.students = {};

    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(fetchStudentByName.pending, (state) => {
      state.status.current = 'loading';
    })
    .addCase(fetchStudentByName.fulfilled, (state, action) => {
      let {id,Name} = action.payload;
      state.studentID = id;
      state.students[id] = {id,Name};
      state.status.current = 'success';
    })
    .addCase(fetchStudentByName.rejected, (state,action) => {
      state.status.current = 'failed';
      state.error.current = action.error.message;
    })
    .addCase(fetchClassesByIds.fulfilled,(state,action)=>{
      let {payload} = action;
      payload.forEach(({Students})=>{
        Students.forEach((studentID)=>{
          state.students[studentID] = {id:studentID}
        })
      })
    })
    .addCase(fetchStudentsByIds.pending,(state,action)=>{state.status.all='loading'})
    .addCase(fetchStudentsByIds.rejected,(state,action)=>{state.status.all='failed';state.error.all=action.error.message})
    .addCase(fetchStudentsByIds.fulfilled,(state,action)=>{
      action.payload.forEach(({Name,id})=>{
        state.students[id] = {Name,id}
      })
      state.status.all = 'success'
    })
  },
});

export const {
  studentNameChanged,
  studentLogout
} = studentSlice.actions
export default studentSlice.reducer;
